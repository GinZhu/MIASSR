; Config file for Meta-Med-SR on dev-gpu-jz426 VM
; Author: Jin Zhu (jin.zhu@cl.cam.ac.uk)

; to run:
;   python train.py --config-file PATH_TO_THIS_INI

; Notes:
;   in ParametersLoader, all values will be called as:
;       eval(config(s, k)))
;   thus, str should be 'xxx'
;   to add new parameters, test it with eval(value) first.


[DEFAULT]
; /DIV2K /OASIS_1/disc1
data_folder = './data/OASIS/example'
output_dir = './outputs'
; print log to screen or not
verbose = True
model_name = 'SOTA_EDSR_OASIS_example'
gpu_id = 0
toy_problem = True
precision = False

[TL]
pre_trained_g = None
pre_trained_d = None
train_meta_feature_extractor = False
pre_trained_f = ''

[Training]
; training_states == epochs_in_total.keys() == loss_scalars.keys()
; loss_scalars[any_key].keys() in training_losses
training_states = ['EDSR',]
epochs_in_total = {'EDSR':200, }
loss_scalars = {'EDSR': {'L1': 1}, }
; L1, MSE, VGG22, VGG54, GAN, WGAN, WGNA_GP, ...
training_losses = ['L1', ]
; GAN / WGAN / WGAN_GP / RaGAN / RaGAN_GP
gan_type = None
gan_k = 1
wgan_clip_value = 0.01
batch_size = 16
augmentation = False
check_every = 100


[Testing]
; SRResNet, SRGAN, SRDenseNet, EDSR, MetaSR
trained_model_mode = 'MetaSR'
well_trained_model_g_x2 = ''
well_trained_model_g_x3 = ''
well_trained_model_g_x4 = ''
well_trained_model_mdsr = ''
well_trained_model_metasr = '/content/drive/My Drive/0_ResearchWork/MetaSR/well_trained_models/Meta_SR_OASIS_data_norm=zero_mean_EDSR_WGAN_GP/SRGAN_model_g.pt'
sr_scales_for_final_testing = [1.5, 2.0, 2.5, 3.0, 3.5, 4.0]
sr_scales_for_saving = [1.5, 2.0, 2.5, 3.0, 3.5, 4.0]
eva_metrics_for_testing = 'psnr ssim mse uqi ergas scc vifp fid'

[LearningRate]
weight_decay = 0
lr_decay_gamma = 0.5
; 'step 200' 'milestones 100'
lr_decay_type = 'milestones 100'

[Activation]
act = 'leaky_relu'
leaky_relu_slope = 0.2
d_act = 'leaky_relu'

[Data]
patch_size = 96
input_channel = 1
multi_threads = 8
; no normalization '' / zero_mean normalization 'zero_mean' / unit_std normalization 'unit_std'
normal_inputs = 'zero_mean'

[ModelEmbedding]
; final_rst = (1 - rs) * pred + rs * interpolated_img
residual_scale = 0.

[DIV2K]
color_mode = 'YCbCr'

[OASIS]
;training_patient_ids_oasis = ['OAS1_0028_MR1', 'OAS1_0016_MR1', 'OAS1_0021_MR1', 'OAS1_0012_MR1', 'OAS1_0011_MR1', 'OAS1_0035_MR1', 'OAS1_0017_MR1', 'OAS1_0039_MR1', 'OAS1_0040_MR1', 'OAS1_0038_MR1', 'OAS1_0027_MR1', 'OAS1_0001_MR1', 'OAS1_0034_MR1', 'OAS1_0042_MR1', 'OAS1_0007_MR1', 'OAS1_0006_MR1', 'OAS1_0018_MR1', 'OAS1_0013_MR1', 'OAS1_0026_MR1', 'OAS1_0002_MR1', 'OAS1_0020_MR1', 'OAS1_0025_MR1', 'OAS1_0022_MR1', 'OAS1_0037_MR1', 'OAS1_0031_MR1', 'OAS1_0005_MR1', 'OAS1_0041_MR1', 'OAS1_0015_MR1', 'OAS1_0014_MR1', 'OAS1_0030_MR1']
;validation_patient_ids_oasis = ['OAS1_0009_MR1', 'OAS1_0033_MR1', 'OAS1_0023_MR1']
;testing_patient_ids_oasis = ['OAS1_0004_MR1']
training_patient_ids_oasis = ['OAS1_0001_MR1', 'OAS1_0002_MR1', 'OAS1_0003_MR1',]
validation_patient_ids_oasis = ['OAS1_0004_MR1',]
testing_patient_ids_oasis = ['OAS1_0004_MR1',]
medical_image_dim_oasis = 2
; 144x120: [32, 28] 180x144: [14, 16]
margin_oasis = [14, 16]


[Optimizer]
; 'Adam, SGD, RMSprop
opt = 'Adam'
learning_rate = 0.0001
momentum = 0.9
beta1 = 0.9
beta2 = 0.999
epsilon = 1e-8
loss_threshold = 1e8

[Evaluation]
eva_metrics = 'mse psnr ssim rmse rmse_sw uqi ergas scc rase sam vifp psnrb fid'
quick_eva_metrics = 'psnr ssim'
quick_eva_num_samples = 64
quick_eva_num_images_to_save = 4
eva_gpu_id = 0

[SingleScaleSR]
sr_scale = 4.0
; 'SRResNet' 'EDSR' 'RDN' 'DenseNet'
sr_generator = 'EDSR'

[MetaSR]
; in sota sr config file, this is for MDSR
all_sr_scales = [2.0, 3.0, 4.0]
test_sr_scales = [2.0, 3.0, 4.0]
; EDSR, SRResNet, RDN, ...
feature_generator = 'EDSR'
meta_sr_kernel_size = 3

[EDSR]
; EDSR act: ReLU, no GAN
; EDSR loss: L1
; lite
;edsr_act = 'leaky_relu'
;edsr_n_feats = 64
;edsr_res_scale = 1.
;edsr_n_resblocks = 16
;edsr_bn = None

edsr_act = 'relu'
edsr_n_feats = 256
edsr_res_scale = 0.1
edsr_n_resblocks = 32
edsr_bn = None

[MDSR]
; MDSR act: relu, no GAN
; MDSR loss: L1
mdsr_act = 'relu'
mdsr_n_feats = 64
mdsr_res_scale = 1.0
mdsr_n_resblocks = 80
mdsr_bn = None

[SRResNet]
; SRResNet act = prelu; d_act = leaky_relu
; SRResNet loss: L2
srresnet_act = 'prelu'
srresnet_n_feats = 64
srresnet_res_scale = 1.0
srresnet_n_resblocks = 16
srresnet_bn = True

[SRDenseNet]
; SRDenseNet act = relu;
; SRDenseNet loss: L2;
srdensenet_act = 'relu'
srdensenet_growth_rate = 16
srdensenet_n_dense_layers = 8
srdensenet_n_dense_blocks = 8
; type: all, h, hl
srdensenet_type = 'all'
srdensenet_dense_scale = 1.0
srdensenet_bn = None
srdensenet_n_feats = 256

[RDN]
rdn_growth_rate = 32
rdn_n_dense_layers = 6
rdn_n_blocks = 20
rdn_dense_scale = 1.0
rdn_bn = None
rdn_n_feats = 64
rdn_local_res_scale = 1.0
rdn_global_res_scale = 1.0

[ESRGAN]
esrgan_act = 'leaky_relu'
esrgan_leaky_relu_slope = 0.2
esrgan_growth_rate = 32
esrgan_n_dense_layers = 4
esrgan_n_rdb = 3
esrgan_n_blocks = 23
esrgan_dense_scale = 1.0
esrgan_bn = None
esrgan_n_feats = 64
esrgan_rdb_res_scale = 0.2
esrgan_rrdb_res_scale = 0.2
esrgan_global_res_scale = 1.0




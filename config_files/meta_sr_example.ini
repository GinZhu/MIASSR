; Config file for Meta-Med-SR on dev-gpu-jz426 VM
; Author: Jin Zhu (jin.zhu@cl.cam.ac.uk)

; to run:
;   python train.py --config-file PATH_TO_THIS_INI

; Notes:
;   in ParametersLoader, all values will be called as:
;       eval(config(s, k)))
;   thus, str should be 'xxx'
;   to add new parameters, test it with eval(value) first.


[DEFAULT]
; /DIV2K /OASIS_1/disc1
data_folder = './data/OASIS/example'
output_dir = './outputs'
; print log to screen or not
verbose = True
model_name = 'MIASSR_OASIS_example'
gpu_id = 0
toy_problem = True
precision = False

[TL]
pre_trained_g = None
pre_trained_d = None
train_meta_feature_extractor = False
pre_trained_f = ''

[Training]
; training_states == epochs_in_total.keys() == loss_scalars.keys()
; loss_scalars[any_key].keys() in training_losses
training_states = ['WarmUp', 'GAN']
epochs_in_total = {'WarmUp': 100, 'GAN': 100}
loss_scalars = {'WarmUp': {'L1': 1}, 'GAN': {'L1': 1, 'VGG22': 0.006, 'ScaleGAN': 0.001}}
; L1, MSE, VGG22, VGG54, GAN, WGAN, WGNA_GP, ScaleGAN ...
training_losses = ['L1', 'VGG22', 'ScaleGAN']
; GAN / WGAN / WGAN_GP / RaGAN / RaGAN_GP
gan_type = 'GAN'
gan_k = 1
wgan_clip_value = 0.01
augmentation = False
check_every = 50

[Testing]
; SRGAN, SRDenseNet, RDN, EDSR, ESRGAN, MDSR, MetaSR, bicubic
trained_model_mode = 'MetaSR'
well_trained_model_g_single_scale = '/content/drive/My Drive/0_ResearchWork/MetaSR/well_trained_models/sota_models/{}_x{}_model_g.pt'
well_trained_model_mdsr = '/content/drive/My Drive/0_ResearchWork/MetaSR/well_trained_models/sota_models/MDSR_model_g.pt'
well_trained_model_metasr = '/content/drive/My Drive/0_ResearchWork/MetaSR/well_trained_models/'
sr_scales_for_final_testing = [1.5, 2.0, 2.5, 3.0, 3.5, 4.0]
sr_scales_for_saving = [2.0, 3.0, 4.0]
eva_metrics_for_testing = 'psnr ssim vifp fid'

[LearningRate]
weight_decay = 0
lr_decay_gamma = 0.5
; 'step 200' 'milestones 100'
lr_decay_type = 'milestones 50'

[Activation]
act = 'leaky_relu'
leaky_relu_slope = 0.2
d_act = 'leaky_relu'

[Data]
batch_size = 16
patch_size = 96
input_channel = 1
multi_threads = 8
; no normalization '' / zero_mean normalization 'zero_mean' / unit_std normalization 'unit_std'
normal_inputs = 'zero_mean'
return_res_image = True

[ModelEmbedding]
; final_rst = (1 - rs) * pred + rs * interpolated_img
residual_scale = 0.

[DIV2K]
color_mode = 'YCbCr'

[OASIS]
;training_patient_ids_oasis = ['OAS1_0028_MR1', 'OAS1_0016_MR1', 'OAS1_0021_MR1', 'OAS1_0012_MR1', 'OAS1_0011_MR1', 'OAS1_0035_MR1', 'OAS1_0017_MR1', 'OAS1_0039_MR1', 'OAS1_0040_MR1', 'OAS1_0038_MR1', 'OAS1_0027_MR1', 'OAS1_0001_MR1', 'OAS1_0034_MR1', 'OAS1_0042_MR1', 'OAS1_0007_MR1', 'OAS1_0006_MR1', 'OAS1_0018_MR1', 'OAS1_0013_MR1', 'OAS1_0026_MR1', 'OAS1_0002_MR1', 'OAS1_0020_MR1', 'OAS1_0025_MR1', 'OAS1_0022_MR1', 'OAS1_0037_MR1', 'OAS1_0031_MR1', 'OAS1_0005_MR1', 'OAS1_0041_MR1', 'OAS1_0015_MR1', 'OAS1_0014_MR1', 'OAS1_0030_MR1']
;validation_patient_ids_oasis = ['OAS1_0009_MR1', 'OAS1_0033_MR1', 'OAS1_0023_MR1']
;testing_patient_ids_oasis = ['OAS1_0004_MR1']
training_patient_ids_oasis = ['OAS1_0001_MR1', 'OAS1_0002_MR1', 'OAS1_0003_MR1',]
validation_patient_ids_oasis = ['OAS1_0004_MR1',]
testing_patient_ids_oasis = ['OAS1_0004_MR1',]
medical_image_dim_oasis = 2
; 144x120: [32, 28] 180x144: [14, 16]
margin_oasis = [14, 16]

[Brats]
training_patient_ids_brats = ['HGG_Brats17_CBICA_ABN_1', 'HGG_Brats17_TCIA_607_1', 'HGG_Brats17_TCIA_221_1', 'HGG_Brats17_TCIA_162_1', 'HGG_Brats17_TCIA_203_1', 'HGG_Brats17_CBICA_ASW_1', 'HGG_Brats17_TCIA_226_1', 'HGG_Brats17_CBICA_AQQ_1', 'HGG_Brats17_CBICA_AAP_1', 'HGG_Brats17_2013_26_1', 'HGG_Brats17_TCIA_608_1', 'HGG_Brats17_CBICA_AQT_1', 'HGG_Brats17_2013_20_1', 'HGG_Brats17_TCIA_149_1', 'HGG_Brats17_TCIA_168_1', 'HGG_Brats17_CBICA_ABO_1', 'HGG_Brats17_2013_12_1', 'HGG_Brats17_CBICA_AME_1', 'HGG_Brats17_TCIA_498_1', 'HGG_Brats17_TCIA_278_1', 'HGG_Brats17_TCIA_491_1', 'HGG_Brats17_2013_25_1', 'HGG_Brats17_TCIA_412_1', 'HGG_Brats17_TCIA_401_1', 'HGG_Brats17_TCIA_242_1', 'HGG_Brats17_CBICA_ALX_1', 'HGG_Brats17_TCIA_184_1', 'HGG_Brats17_CBICA_AWH_1', 'HGG_Brats17_TCIA_257_1', 'HGG_Brats17_TCIA_603_1', 'HGG_Brats17_TCIA_121_1', 'HGG_Brats17_TCIA_218_1', 'HGG_Brats17_TCIA_105_1', 'HGG_Brats17_TCIA_479_1', 'HGG_Brats17_TCIA_396_1', 'LGG_Brats17_TCIA_202_1', 'LGG_Brats17_TCIA_644_1', 'LGG_Brats17_TCIA_630_1', 'LGG_Brats17_2013_1_1', 'LGG_Brats17_TCIA_402_1', 'LGG_Brats17_TCIA_266_1', 'LGG_Brats17_TCIA_312_1', 'LGG_Brats17_2013_24_1', 'LGG_Brats17_TCIA_653_1', 'LGG_Brats17_TCIA_632_1', 'LGG_Brats17_TCIA_299_1', 'LGG_Brats17_TCIA_282_1', 'LGG_Brats17_TCIA_640_1', 'LGG_Brats17_2013_6_1', 'LGG_Brats17_TCIA_629_1']
validation_patient_ids_brats = ['HGG_Brats17_2013_5_1', 'HGG_Brats17_TCIA_198_1', 'LGG_Brats17_TCIA_310_1']
testing_patient_ids_brats = ['HGG_Brats17_2013_5_1', 'HGG_Brats17_TCIA_198_1', 'HGG_Brats17_TCIA_378_1', 'HGG_Brats17_CBICA_ABE_1', 'HGG_Brats17_TCIA_296_1', 'HGG_Brats17_CBICA_ARF_1', 'HGG_Brats17_TCIA_375_1', 'LGG_Brats17_TCIA_618_1', 'LGG_Brats17_TCIA_141_1', 'LGG_Brats17_TCIA_310_1']
; remember to modify Data:input_channel correspondingly
modalities_brats = ['t1ce',]
medical_image_dim_brats = 2
margin_brats = [30, 35]

[ACDC]
training_patient_ids_acdc = ['patient011', 'patient014', 'patient043', 'patient009', 'patient083', 'patient001', 'patient042', 'patient019', 'patient095', 'patient094', 'patient032', 'patient100', 'patient090', 'patient093', 'patient065', 'patient080', 'patient010', 'patient073', 'patient006', 'patient061', 'patient023', 'patient028', 'patient063', 'patient031', 'patient084', 'patient091', 'patient072', 'patient060', 'patient058', 'patient003', 'patient017', 'patient059', 'patient004', 'patient078', 'patient075', 'patient071', 'patient025', 'patient021', 'patient064', 'patient074', 'patient018', 'patient008', 'patient026', 'patient029', 'patient036', 'patient013', 'patient002', 'patient034', 'patient086', 'patient055', 'patient016', 'patient089', 'patient044', 'patient088', 'patient022', 'patient050', 'patient092', 'patient081', 'patient096', 'patient039', 'patient098', 'patient067', 'patient099', 'patient007', 'patient045', 'patient077', 'patient052', 'patient051', 'patient087', 'patient066', 'patient041', 'patient069', 'patient024', 'patient057', 'patient079', 'patient037', 'patient068', 'patient053', 'patient047', 'patient038']
validation_patient_ids_acdc = ['patient049', 'patient015', 'patient082', 'patient035', 'patient070', 'patient056', 'patient046', 'patient062']
testing_patient_ids_acdc = ['patient049', 'patient015', 'patient082', 'patient035', 'patient070', 'patient056', 'patient046', 'patient062', 'patient040', 'patient012', 'patient097', 'patient030', 'patient048', 'patient027', 'patient020', 'patient076', 'patient005', 'patient085', 'patient054', 'patient033']
medical_image_dim_acdc = 2
crop_size_acdc = 128

[COVID]
training_patient_ids_covid = None
validation_patient_ids_covid = None
testing_patient_ids_covid = None
; remember to modify Data:input_channel correspondingly
medical_image_dim_covid = 2
margin_covid = [90, 50]

[Optimizer]
; 'Adam, SGD, RMSprop
opt = 'Adam'
learning_rate = 0.0001
momentum = 0.9
beta1 = 0.9
beta2 = 0.999
epsilon = 1e-8
loss_threshold = 1e8

[Evaluation]
eva_metrics = 'psnr ssim'
quick_eva_metrics = 'psnr ssim'
quick_eva_num_samples = 64
quick_eva_num_images_to_save = 4
eva_gpu_id = 0

[SingleScaleSR]
sr_scale = 2.0
; 'SRResNet' 'EDSR' 'RDN' 'DenseNet'
sr_generator = 'EDSR'

[MetaSR]
all_sr_scales = [1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0]
test_sr_scales = [1.5, 2.0, 2.5, 3.0, 3.5, 4.0]
; EDSR, SRResNet, RDN, ...
feature_generator = 'EDSR'
meta_sr_kernel_size = 3

[EDSR]
; EDSR act: ReLU, no GAN, 256 feats, 0.1 res_scale
; EDSR loss: L1
edsr_act = 'leaky_relu'
edsr_n_feats = 64
edsr_res_scale = 1.
edsr_n_resblocks = 16
edsr_bn = None
;edsr_act = 'relu'
;edsr_n_feats = 256
;edsr_res_scale = 0.1
;edsr_n_resblocks = 32
;edsr_bn = None

[MDSR]
; MDSR act: relu, no GAN
; MDSR loss: L1
mdsr_act = 'relu'
mdsr_n_feats = 64
mdsr_res_scale = 1.0
mdsr_n_resblocks = 8
mdsr_bn = None

[SRResNet]
; SRResNet act = prelu; d_act = leaky_relu
; SRResNet loss: L2
srresnet_act = 'prelu'
srresnet_n_feats = 64
srresnet_res_scale = 1.0
srresnet_n_resblocks = 16
srresnet_bn = True

[SRDenseNet]
; SRDenseNet act = relu;
; SRDenseNet loss: L2;
srdensenet_act = 'relu'
srdensenet_growth_rate = 16
srdensenet_n_dense_layers = 8
srdensenet_n_dense_blocks = 8
; type: all, h, hl
srdensenet_type = 'all'
srdensenet_dense_scale = 1.0
srdensenet_bn = None
srdensenet_n_feats = 256

[RDN]
rdn_growth_rate = 32
rdn_n_dense_layers = 6
rdn_n_blocks = 20
rdn_dense_scale = 1.0
rdn_bn = None
rdn_n_feats = 64
rdn_local_res_scale = 1.0
rdn_global_res_scale = 1.0

[ESRGAN]
esrgan_act = 'leaky_relu'
esrgan_leaky_relu_slope = 0.2
esrgan_growth_rate = 32
esrgan_n_dense_layers = 4
esrgan_n_rdb = 3
esrgan_n_blocks = 23
esrgan_dense_scale = 1.0
esrgan_bn = None
esrgan_n_feats = 64
esrgan_rdb_res_scale = 0.2
esrgan_rrdb_res_scale = 0.2
esrgan_global_res_scale = 1.0



